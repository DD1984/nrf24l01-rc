;
; D52 configuration file for ../firmware-images/xr3100.hex
; Generated by D52 V3.4.1 on 2014/11/12 14:00
;

! 0003 Vector: Interrupt from pin GP INT0, GP INT1 or GP INT2
! 000b Vector: Timer 0 overflow
! 0013 Vector: Power Failure
! 001b Vector: Timer 1 overflow
! 0023 Vector: Serial channel
! 002b Vector: Timer 2 overflow or External reload
! 0043 Vector: RF SPI ready
! 004b Vector: RF Interrupt
;l 0053 Vector: SPI, I2C


c 0000-000d	; Code space

c 000e-0012  ; 8-bit data

c 0013-001d	; Code space

c 001e-0022	; 8-bit data

c 0023-002a	; Code space

c 002b-002d	; pointers

c 002e-0047	; Code space

b 0048-004d	; 8-bit data

c 004e-06b9	; Code space

b 06ba-070e ; 8-bit data

c 070f-07ab	; Code space

b 07ac-0811	; 8-bit data

c 0812-081c	; Code space

b 081d-082a	; 8-bit data

c 082b-0830	; Code space

b 0831-0835	; 8-bit data

c 0836-087c	; Code space

b 087d-0884	; pointers

c 0885-0b3d	; Code space

b 0b3e-0b90	; 8-bit data

c 0b91-0c30	; Code space

b 0c31-0c81	; 8-bit data

c 0c81-0d08	; Code space

b 0d09-0d4b	; 8-bit data

c 0d4c-0dc5	; Code space

b 0dc6-0dfc	; 8-bit data

c 0dfd-0e33	; Code space

b 0e34-0e7e	; 8-bit data

c 0e7f-0e98	; Code space

b 0e99-0ec4	; 8-bit data

c 0ec5-0eef	; Code space

c 0ef0-101f	; 8-bit data

c 1020-1056	; Code space

b 1057-1070	; 8-bit data

c 1071-10cb	; Code space

b 10cc-10e1	; 8-bit data

c 10e2-111e	; Code space

b 111f-113c		; 8-bit data

c 113d-1155	; Code space

b 1156-117f	; 8-bit data

c 1180-11ac	; Code space

b 11ad-11c0	; 8-bit data

c 11c1-11ca	; Code space

b 11cb-11d4	; 8-bit data

c 11d5-11de	; Code space

b 11df-11fc	; 8-bit data

c 11fd-1206	; Code space

b 1207-120d	; 8-bit data

c 120e-1214	; Code space

b 1215-1222	; 8-bit data

c 1223-1229	; Code space

b 122a-1235		; 8-bit data

c 1236-1249	; Code space

i 124a-1ffe	; ignore data

! 000e OBSERVE_TX ?!
! 001e FIFO_STATUS
! 0024 Masks out TX_FULL and TX_EMPTY

# 01d2 ***************************************************************************
# 01d2 This code below sets the servo pulse durations
# 01d2 ***************************************************************************

l 05b3 servo_pulse_t1_handler
s 0003 servo_out_state
# 05b3 ***************************************************************************
# 05b3 Timer 1 interrupt handler, generates the servo pulses
# 05b3
# 05b3 Outputs the servo pulses, 3 or 4(!) channels
# 05b3 RAM 0x03 contains a state machine. Timer 1 is used
# 05b3 for timing
# 05b3 Timing values are stored in RAM 0x22, 0x24, 0x26, 0x28
# 05b3 ***************************************************************************


l 083e reset
# 083e ***************************************************************************

l 08ca timer2_handler
# 08ca ***************************************************************************
# 08ca Timer 2 interrupt handler
# 08ca
# 08ca Does some SPI stuff
# 08ca Uses Timer 2
# 08ca ***************************************************************************

! 0b2d Disable ‘Auto Acknowledgment’
! 0b28 Enable ‘Auto Acknowledgment’ on all pipes
! 0b32 EN_RXADDR
! 0b39 EN_AA


l 0b91 timer0_handler
# 0b91 ***************************************************************************
# 0b91 Timer 0 interrupt handler
# 0b91
# 0b91 Sets the servo output timer 0
# 0b91 ***************************************************************************

l 0cc6 set_crc
# 0cc6 ***************************************************************************
# 0cc6 set_crc
# 0cc6 In: R7: Number of bytes of CRC to use, 0 to turn it off
# 0cc6 ***************************************************************************

! 0cc8 CONFIG
! 0cde clear EN_CRC (CRC off)
l 0ce4 set_crc_1byte
! 0ce7 set EN_CRC
! 0cee clear CRCO (1 bytes CRC)
l 0cf4 set_crc_2bytes
! 0cf7 set EN_CRC
! 0cfe set CRCO (2 bytes CRC)
l 0d02 set_crc_write_config
! 0d04 CONFIG

l 118f spi_write
l 1191 _spi_write_loop
# 118f ***************************************************************************
# 118f SPI Write
# 118f ***************************************************************************

l 113d spi_read_register
# 113d ***************************************************************************
# 113d SPI Read Byte
# 113d In: A: command    Out: R7: read value
# 113d ***************************************************************************

l 1199 spi_get_number_of_address_bytes
x 119a 03h
! 1199 SETUP_AW
# 1199 ***************************************************************************
# 1199 SPI spi_get_number_of_address_bytes Byte
# 1199 Out: R7: Number of address bytes in the receiver
# 1199 ***************************************************************************

l 109f spi_write_register
# 109f ***************************************************************************
# 109f SPI Write to a RF register
# 109f In: R7: register number, R5: value
# 109f ***************************************************************************

l 11a3 spi_is_rx_fifo_empty
# 11a3 ***************************************************************************
# 11a3 spi_is_rx_fifo_empty
# 11a3
# 11a3 R7 is 1 if the RF RX FIFO is empty, 0 if it has data pending
# 11a3 ***************************************************************************

l 11c1 spi_received_power_decector
# 11c1 ***************************************************************************
# 11c1 spi_received_power_decector
# 11c1
# 11c1 Returns the Received Power Detector (Carrier Detect) flag
# 11c1 ***************************************************************************

! 1236 R_RX_PL_WID
l 1236 spi_read_rx_fifo_payload_width
# 1236 ***************************************************************************
# 1236 spi_read_rx_fifo_payload_width
# 1236
# 1236 Returns the number of bytes of the top payload in the RX FIFO
# 1236 ***************************************************************************

l 1246 rf_handler
# 1246 ****************************************************
# 1246 RF interrupt handler
# 1246 ****************************************************

f e4 SPIRCON0
f e5 SPIRCON1
f e6 SPIRSTAT
f e7 SPIRDAT
f e8 RFCON
f e9 MD0
f ea MD1
f eb MD2
f ec MD3
f ed MD4
f ee MD5
f ef ARCON

f f8 FSR
f f9 FPCR
f fa FCR
f fc SPIMCON0
f fd SPIMCON1
f fe SPIMSTAT
f ff SPIMDAT

f b2 PWMCON
f a1 PWMDC0
f a2 PWMDC1
f a4 PWRDWN
f d6 RNGCTL
f d7 RNGDAT
f b1 RSTREAS
f b4 RTC2CMP0
f b5 RTC2CMP1
f b3 RTC2CON
f b6 RTC2CPT00
f ab RTC2CPT01
f ac RTC2CPT10
f 99 S0BUF
f 98 S0CON
f ba S0RELH
f aa S0RELL

f c1 CCEN
f c3 CCH1
f c5 CCH2
f c7 CCH3
f c2 CCL1
f c4 CCL2
f c6 CCL3
f dd CCPDATIA
f de CCPDATIB
f df CCPDATO
f ad CLKLFCTRL
f a3 CLKCTRL
f db COMPCON
f cb CRCH
f ca CRCL

f a7 MEMCON
f c9 MPAGE
f ae OPMCON

f e2 W2CON0
f e1 W2CON1
f da W2DAT
f d9 W2SADR
f d8 ADCON
f af WDSW
f a5 WUCON
f cf WUOPC0
f ce WUOPC1