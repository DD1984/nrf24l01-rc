;
; D52 configuration file for hk310.hex
; Generated by D52 V3.4.1 on 2014/11/13 17:38
;
c 0000-004d	; Code space

c 004e-043c	; Code space

c 043d-053e

c 053f-094c	; Code space
b 094d-094f	; 8-bit data
a 0950-0953	; pointers
b 0954-0956	; 8-bit data
a 0957-095a	; pointers
b 095b-096e	; 8-bit data
a 096f-0970	; pointers
b 0971-0975	; 8-bit data
a 0976-0977	; pointers
b 0978-0981	; 8-bit data
a 0982-0985	; pointers
b 0986-098a	; 8-bit data
a 098b-098c	; pointers
b 098d-0990	; 8-bit data
a 0991-0992	; pointers
b 0993		; 8-bit data
a 0994-0995	; pointers
b 0996-0999	; 8-bit data
a 099a-099b	; pointers
b 099c-09a0	; 8-bit data
a 09a1-09a6	; pointers
b 09a7-09aa	; 8-bit data
a 09ab-09ae	; pointers
b 09af-09b4	; 8-bit data
a 09b5-09b6	; pointers
b 09b7-09bc	; 8-bit data
a 09bd-09be	; pointers
b 09bf-09c1	; 8-bit data
a 09c2-09c5	; pointers
b 09c6-09ca	; 8-bit data
a 09cb-09ce	; pointers
b 09cf-09d0	; 8-bit data
a 09d1-09d2	; pointers
b 09d3-09de	; 8-bit data
c 09df-0a1d	; Code space
a 0a1e-0a23	; pointers
b 0a24-0a25	; 8-bit data
c 0a26-0a6a	; Code space
b 0a6b-0a76	; 8-bit data
a 0a77-0a78	; pointers
b 0a79-0a7a	; 8-bit data
a 0a7b-0a7c	; pointers
b 0a7d-0a7e	; 8-bit data
a 0a7f-0a82	; pointers
b 0a83		; 8-bit data
a 0a84-0a85	; pointers
b 0a86-0a8f	; 8-bit data
a 0a90-0a91	; pointers
b 0a92-0a93	; 8-bit data
a 0a94-0a95	; pointers
b 0a96-0a9b	; 8-bit data
a 0a9c-0aa1	; pointers
b 0aa2-0aa3	; 8-bit data
c 0aa4-0aae	; Code space
b 0aaf-0ab3	; 8-bit data
c 0ab4-0cbb	; Code space
b 0cbc-0cd4	; 8-bit data
a 0cd5-0cd6	; pointers
b 0cd7-0ce3	; 8-bit data
a 0ce4-0ce5	; pointers
b 0ce6-0ce8	; 8-bit data
a 0ce9-0cea	; pointers
b 0ceb-0cf3	; 8-bit data
a 0cf4-0cf5	; pointers
b 0cf6-0d0c	; 8-bit data
a 0d0d-0d0e	; pointers
b 0d0f-0d10	; 8-bit data
a 0d11-0d12	; pointers
b 0d13-0d18	; 8-bit data
a 0d19-0d1c	; pointers
b 0d1d		; 8-bit data
a 0d1e-0d1f	; pointers
b 0d20-0d27	; 8-bit data
i 0d28-0d29	; ignore data
i 0d2a		; ignore data
a 0d2b-0d2e	; pointers
b 0d2f-0d31	; 8-bit data
a 0d32-0d33	; pointers
b 0d34-0d35	; 8-bit data
a 0d36-0d37	; pointers
b 0d38-0d39	; 8-bit data
a 0d3a-0d3b	; pointers
b 0d3c-0d3d	; 8-bit data
a 0d3e-0d41	; pointers
b 0d42		; 8-bit data
a 0d43-0d44	; pointers
b 0d45-0d47	; 8-bit data
a 0d48-0d49	; pointers
b 0d4a-0d51	; 8-bit data
a 0d52-0d53	; pointers
i 0d54-0d55	; ignore data
c 0d56-0d98	; Code space
b 0d99-0d9b	; 8-bit data
a 0d9c-0d9f	; pointers
b 0da0-0da2	; 8-bit data
a 0da3-0da6	; pointers
b 0da7-0dad	; 8-bit data
a 0dae-0db1	; pointers
b 0db2-0db7	; 8-bit data
a 0db8-0dbb	; pointers
b 0dbc		; 8-bit data
a 0dbd-0dbe	; pointers
b 0dbf-0dc7	; 8-bit data
a 0dc8-0dc9	; pointers
b 0dca-0dd0	; 8-bit data
a 0dd1-0dd4	; pointers
b 0dd5-0dd7	; 8-bit data
a 0dd8-0ddb	; pointers
c 0ddc-0ecd	; Code space
b 0ece-0ed0	; 8-bit data
a 0ed1-0ed2	; pointers
b 0ed3-0ede	; 8-bit data
a 0edf-0ee0	; pointers
b 0ee1-0ee2	; 8-bit data
a 0ee3-0eec	; pointers
b 0eed-0eee	; 8-bit data
c 0eef-0ef1	; Code space
b 0ef2-0ef4	; 8-bit data
a 0ef5-0ef6	; pointers
b 0ef7		; 8-bit data
c 0ef8-0efe	; Code space
b 0eff-0f01	; 8-bit data
c 0f02-0f3b	; Code space
b 0f3c-0f47	; 8-bit data
a 0f48-0f49	; pointers
b 0f4a-0f4b	; 8-bit data
a 0f4c-0f51	; pointers
b 0f52-0f58	; 8-bit data
a 0f59-0f5a	; pointers
b 0f5b-0f5e	; 8-bit data
a 0f5f-0f62	; pointers
b 0f63-0f6a	; 8-bit data
a 0f6b-0f6c	; pointers
b 0f6d-0f6e	; 8-bit data
a 0f6f-0f70	; pointers
b 0f71		; 8-bit data
a 0f72-0f73	; pointers
b 0f74-0f75	; 8-bit data
a 0f76-0f79	; pointers
b 0f7a		; 8-bit data
a 0f7b-0f7c	; pointers
b 0f7d-0f80	; 8-bit data
a 0f81-0f82	; pointers
b 0f83-0f8f	; 8-bit data
a 0f90-0f91	; pointers
b 0f92-0f9c	; 8-bit data
a 0f9d-0fa0	; pointers
c 0fa1-0ffb	; Code space
b 0ffc-0ffe	; 8-bit data
c 0fff-1027	; Code space
b 1028-102b	; 8-bit data
a 102c-102d	; pointers
b 102e-1035	; 8-bit data
a 1036-103b	; pointers
b 103c		; 8-bit data
a 103d-103e	; pointers
b 103f-104e	; 8-bit data
a 104f-1050	; pointers
b 1051-1054	; 8-bit data
a 1055-1058	; pointers
b 1059-105f	; 8-bit data
a 1060-1065	; pointers
b 1066		; 8-bit data
a 1067-1068	; pointers
b 1069-1076	; 8-bit data
a 1077-107a	; pointers
b 107b-107e	; 8-bit data
a 107f-1080	; pointers
b 1081-1088	; 8-bit data
a 1089-108e	; pointers
b 108f		; 8-bit data
a 1090-1091	; pointers
b 1092-109f	; 8-bit data
a 10a0-10a1	; pointers
b 10a2-10a6	; 8-bit data
a 10a7-10a8	; pointers
b 10a9-10b0	; 8-bit data
a 10b1-10b6	; pointers
b 10b7		; 8-bit data
a 10b8-10b9	; pointers
b 10ba-10c5	; 8-bit data
a 10c6-10c7	; pointers
b 10c8		; 8-bit data
c 10c9-10ee	; Code space
b 10ef-10f2	; 8-bit data
a 10f3-10f4	; pointers
b 10f5-10fc	; 8-bit data
a 10fd-10fe	; pointers
b 10ff-1100	; 8-bit data
a 1101-1102	; pointers
b 1103-1104	; 8-bit data
a 1105-1106	; pointers
b 1107-110e	; 8-bit data
a 110f-1110	; pointers
b 1111		; 8-bit data
c 1112-11ac	; Code space
b 11ad-11c6	; 8-bit data
c 11c7-1221	; Code space
b 1222		; 8-bit data
c 1223-124c	; Code space
b 124d-1251	; 8-bit data
a 1252-1253	; pointers
b 1254-1257	; 8-bit data
a 1258-1259	; pointers
b 125a-125c	; 8-bit data
a 125d-125e	; pointers
b 125f-1260	; 8-bit data
a 1261-1264	; pointers
b 1265		; 8-bit data
a 1266-1267	; pointers
b 1268-126c	; 8-bit data
a 126d-1270	; pointers
b 1271-1272	; 8-bit data
a 1273-1274	; pointers
b 1275-127e	; 8-bit data
c 127f-1291	; Code space
b 1292-1293	; 8-bit data
a 1294-1295	; pointers
b 1296-12ab	; 8-bit data
a 12ac-12b1	; pointers
b 12b2-12bb	; 8-bit data
a 12bc-12c1	; pointers
b 12c2-12c3	; 8-bit data
a 12c4-12c5	; pointers
b 12c6-12d1	; 8-bit data
a 12d2-12d5	; pointers
b 12d6-12da	; 8-bit data
a 12db-12dc	; pointers
b 12dd-12df	; 8-bit data
a 12e0-12e1	; pointers
b 12e2-12e7	; 8-bit data
a 12e8-12e9	; pointers
b 12ea		; 8-bit data
a 12eb-12ec	; pointers
b 12ed-12f1	; 8-bit data
a 12f2-12f3	; pointers
b 12f4		; 8-bit data
a 12f5-12f6	; pointers
b 12f7		; 8-bit data
c 12f8-1310	; Code space
b 1311-1312	; 8-bit data
c 1313-131c	; Code space
b 131d-131e	; 8-bit data
a 131f-1320	; pointers
b 1321-1323	; 8-bit data
a 1324-1327	; pointers
b 1328-1331	; 8-bit data
a 1332-1333	; pointers
b 1334		; 8-bit data
c 1335-1340	; Code space
b 1341-1342	; 8-bit data
a 1343-1344	; pointers
b 1345-134e	; 8-bit data
a 134f-1350	; pointers
b 1351-1353	; 8-bit data
c 1354-1363	; Code space
b 1364-1365	; 8-bit data
a 1366-1367	; pointers
b 1368-136b	; 8-bit data
a 136c-136d	; pointers
b 136e		; 8-bit data
c 136f-13a3	; Code space
b 13a4-13a5	; 8-bit data
a 13a6-13a7	; pointers
b 13a8-13aa	; 8-bit data
a 13ab-13ac	; pointers
b 13ad-13af	; 8-bit data
a 13b0-13b1	; pointers
b 13b2-13b4	; 8-bit data
a 13b5-13b6	; pointers
b 13b7-13b8	; 8-bit data
a 13b9-13bc	; pointers
b 13bd-13be	; 8-bit data
a 13bf-13c0	; pointers
b 13c1-13c2	; 8-bit data
a 13c3-13c6	; pointers
b 13c7-13c8	; 8-bit data
a 13c9-13ca	; pointers
b 13cb-13d2	; 8-bit data
a 13d3-13d4	; pointers
b 13d5		; 8-bit data
a 13d6-13d7	; pointers
b 13d8-13da	; 8-bit data
a 13db-13de	; pointers
b 13df-13e3	; 8-bit data
a 13e4-13e7	; pointers
b 13e8-13ed	; 8-bit data
a 13ee-13f1	; pointers
b 13f2-13f3	; 8-bit data
c 13f4-1411	; Code space
b 1412-1413	; 8-bit data
c 1414-141f	; Code space
b 1420-1423	; 8-bit data
c 1424-1426	; Code space
b 1427-142e	; 8-bit data
a 142f-1432	; pointers
b 1433-1435	; 8-bit data
a 1436-1437	; pointers
b 1438-1439	; 8-bit data
c 143a-143f	; Code space
b 1440		; 8-bit data
a 1441-1442	; pointers
b 1443-1445	; 8-bit data
c 1446-1448	; Code space
i 1449-3ffe	; ignore data



! 0000 Vector: Reset
! 0003 Vector: Interrupt from pin GP INT0, GP INT1 or GP INT2
! 000b Vector: Timer 0 overflow
! 0013 Vector: Power Failure
! 001b Vector: Timer 1 overflow
! 0023 Vector: Serial channel
! 002b Vector: Timer 2 overflow or External reload
! 0043 Vector: RF SPI ready
! 004b Vector: RF Interrupt
;l 0053 Vector: SPI, I2C

f 88 TCON
k 88 TCON_it0
k 89 TCON_ie0
k 8a TCON_it1
k 8b TCON_ie1
k 8c TCON_tr0
k 8d TCON_tf0
k 8e TCON_tr1
k 8f TCON_tf1

f 93 P0DIR
f 94 P1DIR

f 98 S0CON
k 98 S0CON_ri0
k 99 S0CON_ti0
k 9a S0CON_rb80
k 9b S0CON_tb80
k 9c S0CON_ren0
k 9d S0CON_sm20
k 9e S0CON_sm0
k 9f S0CON_sm1

f 99 S0BUF
f 9e P0CON
f 9f P1CON

f a1 PWMDC0
f a2 PWMDC1
f a3 CLKCTRL
f a4 PWRDWN
f a5 WUCON
f a7 MEMCON

f a8 IEN0
k a8 IEN0_ifp
k a9 IEN0_tf0
k aa IEN0_pwrfail
k ab IEN0_tf1
k ac IEN0_serial
k ad IEN0_tf2
k ae IEN0.6
k af IEN0_all

f a9 IP0
f aa S0RELL
f ab RTC2CPT01
f ac RTC2CPT10
f ad CLKLFCTRL
f ae OPMCON
f af WDSW

f b1 RSTREAS
f b2 PWMCON
f b3 RTC2CON
f b4 RTC2CMP0
f b5 RTC2CMP1
f b6 RTC2CPT00

f b8 IEN1
k b8 IEN1_rfready
k b9 IEN1_rfirq
k ba IEN1_spi_iic
k bb IEN1_wakeup
k bc IEN1_misc
k bd IEN1_tick
k be IEN1.6
k bf IEN1_exf2

f b9 IP1
f ba S0RELH
f bc SPISCON0
f be SPISSTAT
f bf SPISDAT

f c0 IRCON
k c0 IRCON_rfready
k c1 IRCON_rfiry
k c2 IRCON_spi_iic
k c3 IRCON_wakeup
k c4 IRCON_misc
k c5 IRCON_tick
k c6 IRCON_tf2
k c7 IRCON_exf2

f c1 CCEN
f c2 CCL1
f c3 CCH1
f c4 CCL2
f c5 CCH2
f c6 CCL3
f c7 CCH3

f c8 T2CON
k c8 T2CON_t2i0
k c9 T2CON_t2i1
k ca T2CON_t2cm
k cb T2CON_t2r0
k cc T2CON_t2r1
k cd T2CON_i2fr
k ce T2CON_i3fr
k cf T2CON_t2ps

f c9 MPAGE
f ca CRCL
f cb CRCH
    f ce WUOPC1
f cf WUOPC0

f d0 PSW
k d1 PSW_f1

f d1 ADCCON3
f d2 ADCCON2
f d3 ADCCON1
f d4 ADCDATH
f d5 ADCDATL
f d6 RNGCTL
f d7 RNGDAT

f d8 ADCON
k df ADCON_bd

f d9 W2SADR
f da W2DAT
f db COMPCON
f dd CCPDATIA
f de CCPDATIB
f df CCPDATO

f e1 W2CON1
f e2 W2CON0
f e4 SPIRCON0
f e5 SPIRCON1
f e6 SPIRSTAT
f e7 SPIRDAT

f e8 RFCON
k e8 RFCON_rfce
k e9 RFCON_rfcsn
k ea RFCON_rfcken

f e9 MD0
f ea MD1
f eb MD2
f ec MD3
f ed MD4
f ee MD5
f ef ARCON

f f8 FSR

f f9 FPCR
f fa FCR
f fc SPIMCON0
f fd SPIMCON1
f fe SPIMSTAT
f ff SPIMDAT


r 1f save_r2
r 1e save_r3_r7

l 000e rf_setup_address_width
! 001e SETUP_AW

l 004e init
# 004e ************************************************************************
# 004e Init
# 004e ************************************************************************

! 6c Wait for the XTAL oscillator
l 00ae main
# 00ae ***************************************************************************
# 00ae MAIN LOOP
# 00ae ***************************************************************************

l 02a0 change_model

l 043d rf_interrupt_handler
# 043d ************************************************************************
# 043d RF Interrupt Handler
# 043d ************************************************************************

l 053f timer0_handler
# 053f ************************************************************************
# 053f Timer0 Interrupt Handler
# 053f ************************************************************************

l 070f uart_handler
# 070f ************************************************************************
# 070f UART Interrupt Handler
# 070f ************************************************************************
l 0722 uart_receive
! 072d Wait for first byte, which is FF
; s X0091 Receive_state
; r 5eh is model_no_received flag
; s X0094 model_no_DATA
; r 5fh is receive flag
; s X009a is UART receive buffer

; UART buf is copied from 009a.. to 0002.. if flag 5fh is set

l 0808 get_indirect_dptr_plus_r1_r2
# 0808 ***************************************************************************
# 0808 get_indirect_dptr_plus_r1_r2
# 0808 r3: flag; 0 = return @dptr+r1, 1 = return @dptr+r2:r1
# 0808 ***************************************************************************


l 09df reset
# 09df ************************************************************************
# 09df Reset
# 09df ************************************************************************


l 0add rf_modify_config_bit
# 0add ***************************************************************************
# 0add rf_modify_config_bit
# 0add
# 0add r7: bit number in the CONFIG reg.  r5: new bit value
# 0add ***************************************************************************

l 09e2 _clear_ram

l 0e95 init_serial

l 0ddc init_rf

l 0e58  rf_set_data_rate

l 0f05 spi_write_stream

l 11f5 init_gpio
l 08ae ic2_write_address
l 1238 i2c_read_byte_from_eeprom
l 0fcf i2c_start
l 08b6 i2c_write_byte
l 0b48 i2c_read_byte
l 1135 i2c_stop
l 0c6a i2c_has_write_finished


l 11c7 spi_write_register
# 11c7 ***************************************************************************
# 11c7 SPI Write to a RF register
# 11c7 In: R7: register number, R5: value
# 11c7 ***************************************************************************


l 12f8 spi_read_register
# 12f8 ***************************************************************************
# 12f8 spi_read_register
# 12f8 In: A: register    Out: R7: read value
# 12f8 ***************************************************************************


l 1359 get_osc_status
# 1359 ************************************************************************
# 1359 get_osc_status
# 1359 Returns 2 if the XTAL OSC is ready, otherwise 1 if running from the RC OSC
# 1359 ************************************************************************

l 1335 read_bind_data_from_eeprom
l 1390 init_timer0
l 13fe extint_handler

l 1408 spi_write
l 140a _spi_write_loop